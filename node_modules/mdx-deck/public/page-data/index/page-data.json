{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","webpackCompilationHash":"","result":{"data":{"deck":{"id":"88453853-3c13-54f7-a486-bb9811cd994a","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar themes = [myTheme];\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  themes: themes,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"React Context\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Why review Context?\"), mdx(\"h1\", null, \"\\uD83E\\uDD37\\u200D\\u2642\\uFE0F\"), mdx(\"hr\", null), mdx(\"h1\", null, mdx(\"inlineCode\", {\n    parentName: \"h1\"\n  }, \"consumer-website\")), mdx(\"p\", null, \"The Gatsby repo uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Context\"), \" in several places:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FeatureFlagsContext\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"LocaleContext\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ThemeContext\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ScrollContext\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"UtmParamContext\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Using these \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Context\"), \" components incorrectly can lead to \\uD83D\\uDC1B\\uD83D\\uDC1E.\"), mdx(\"p\", null, \"So, let's review how they work!\"), mdx(\"hr\", null), mdx(\"h1\", null, \"What does Context look like?\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Context\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Context\"), \" = \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Provider(s)\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Consumers\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a new \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Context\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a value and the logic that updates it\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Pass the value to a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Provider\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Consume the value with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Consumers\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Why use Context?\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Global state\"), mdx(\"p\", null, \"Context let's you send values to components down the tree without passing them as props through every level.\"), mdx(\"p\", null, \"Whenever the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Provider\"), \" receives a new value, it transmits it to each \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Consumer\"), \", which re-renders. \\uD83D\\uDCE1\"), mdx(\"p\", null, \"This can be help synchronize values across the component tree, like theme styles, localization, etc.\"), mdx(\"hr\", null), mdx(\"h1\", null, \"How to use Context?\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Create Context\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a new \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Context\"), \" instance\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Optionally, give it a default value (only used if no \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Provider\"), \")\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import { createContext } from 'react'\\n\\nconst NewContext = createContext(defaultValue);\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Add a Provider\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Generally, add \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"one\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Provider\"), \" component as high up the component tree as necessary to wrap all \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Consumers\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add nested \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Provider\"), \" instances if you need to override the main instance in a specific part of the tree (rare).\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Provider\"), \" is always implemented as a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"JSX\"), \" wrapper:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import NewContext from './NewContext'\\n\\n<NewContext.Provider value={/* some value */}>\\n  {/* children */}\\n</NewContext.Provider>\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Add Consumers\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"multiple\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Consumers\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Place each \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Consumer\"), \" as close to the component that uses it as possible (ideally, \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"inside\"), \" that component)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Consumer\"), \" receives its value from the nearest \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Provider\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Consumer\"), \" can be implemented as a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"JSX\"), \" wrapper (using the render prop pattern) or with a hook:\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Add Consumers\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import NewContext from './NewContext'\\n\\n<NewContext.Consumer>\\n  {value => /* JSX using value */}\\n</NewContext.Consumer>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import { useContext } from 'react'\\nimport NewContext from './NewContext'\\n\\nfunction MyComponent() {\\n  const value = useContext(NewContext);\\n\\n  return /* JSX using value */\\n}\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"What can go wrong?\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Unintentional Re-renders \\uD83D\\uDD01\"), mdx(\"p\", null, \"When a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Consumer\"), \" re-renders, it re-renders any extra components that are wrapped by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Consumer />\"), \" or inside the component calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useContext()\"), \" as well.\"), mdx(\"p\", null, \"These unintentional re-renders reset each component to its initial state, which can break the UI. \\uD83D\\uDE31\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Scrolling bug \\uD83D\\uDC1B\"), mdx(\"p\", null, \"The scrolling bug on the two live pages was happening because the entire page was unintentionally re-rendering every time the user scrolled.\"), mdx(\"p\", null, \"These unintentional re-renders reset all images to their blurred state, reset all accordions to showing their first pane, etc.\"), mdx(\"p\", null, \"TODO: link to old deploy with the issue?\"), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pages/en-ca/smart-thermostat-voice.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// ...\\nreturn (\\n  <ScrollProvider>\\n    <ScrollContext.Consumer>\\n      {({ navClass }) => (\\n        <NavComponent navClass={navClass} />\\n        <ComponentThatShouldNotReRender1 />\\n        <ComponentThatShouldNotReRender2 />\\n        // ...\\n        <ComponentThatShouldNotReRender10 />\\n      )}\\n    </ScrollContext.Consumer>\\n  </ScrollProvider>\\n)\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Solution\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Move the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Provider\"), \" up the tree into \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AppProvider\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Move the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Consumer\"), \" down the tree into \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NavComponent\"))), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.ecobee.com/en-ca/smart-thermostat-voice/\"\n  }), \"https://www.ecobee.com/en-ca/smart-thermostat-voice/\")), mdx(\"hr\", null), mdx(\"h1\", null, \"TL;DR\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Pair one \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Provider\"), \" with multiple \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Consumers\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Provider\"), \" high enough to wrap all \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Consumers\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Isolate the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"JSX\"), \" that should re-render and place each \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Consumer\"), \" as close to it as possible\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Links\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Context\"), \":\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/context.html\"\n  }), \"https://reactjs.org/docs/context.html\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useContext\"), \":\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/hooks-reference.html#usecontext\"\n  }), \"https://reactjs.org/docs/hooks-reference.html#usecontext\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","isCreatedByStatefulCreatePages":false,"id":"88453853-3c13-54f7-a486-bb9811cd994a","slug":"","title":"React Context"}}}